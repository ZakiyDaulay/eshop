plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '4.3.1.3277'
}

group = 'id.ac.ui.cs.advprog'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
def junitjupiterVersion = "5.9.1"
def seleniumJavaVersion = "4.14.1"
def seleniumJupiterVersion = "5.0.1"
def webdrivermanagerVersion = "5.6.3"


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'  // Add this line
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.seleniumhq.selenium:selenium-java:4.14.1")
    testImplementation("io.github.bonigarcia:selenium-jupiter:5.0.1")
    testImplementation("io.github.bonigarcia:webdrivermanager:5.6.3")
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")

}
tasks.register("unitTest", Test) {

    description = "Runs unit tests."
    group = "verification"

    filter {
        excludeTestsMatching("*FunctionalTest")

    }
}
tasks.register("functionalTest", Test) {

    description = "Runs functional tests."
    group = "verification"

    filter {
        includeTestsMatching("*FunctionalTest")

    }
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
tasks.test {//
    filter {
        excludeTestsMatching("*FunctionalTest")//excludes functional test
    }
    finalizedBy(tasks.jacocoTestReport)//jacocotestreport will run after the test
}

tasks.jacocoTestReport {// ensures jacocotestreport will run after test
        dependsOn(tasks.test)
        reports {
            xml.required = true
            html.required = true
            csv.required = false
        }
    }

sonar {
    properties {
        property("sonar.projectKey", "ZakiyDaulay_eshop")
        property("sonar.organization", "zakiydaulay")
        property("sonar.host.url", "https://sonarcloud.io")
        property("sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml")

    }
}